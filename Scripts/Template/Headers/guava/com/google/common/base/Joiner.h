//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/antoniocortes/j2objcprj/relases/j2objc/guava/build_result/java/com/google/common/base/Joiner.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleCommonBaseJoiner")
#ifdef RESTRICT_ComGoogleCommonBaseJoiner
#define INCLUDE_ALL_ComGoogleCommonBaseJoiner 0
#else
#define INCLUDE_ALL_ComGoogleCommonBaseJoiner 1
#endif
#undef RESTRICT_ComGoogleCommonBaseJoiner

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComGoogleCommonBaseJoiner_) && (INCLUDE_ALL_ComGoogleCommonBaseJoiner || defined(INCLUDE_ComGoogleCommonBaseJoiner))
#define ComGoogleCommonBaseJoiner_

@class ComGoogleCommonBaseJoiner_MapJoiner;
@class IOSObjectArray;
@class JavaLangStringBuilder;
@protocol JavaLangAppendable;
@protocol JavaLangCharSequence;
@protocol JavaLangIterable;
@protocol JavaUtilIterator;

/*!
 @brief An object which joins pieces of text (specified as an array, <code>Iterable</code>, varargs or even a 
 <code>Map</code>) with a separator.It either appends the results to an <code>Appendable</code> or returns
  them as a <code>String</code>.
 Example: 
 @code
 Joiner joiner = Joiner.on("; ").skipNulls();
   . . .
  return joiner.join("Harry", null, "Ron", "Hermione"); 
 
@endcode
  
 <p>This returns the string <code>"Harry; Ron; Hermione"</code>. Note that all input elements are
  converted to strings using <code>Object.toString()</code> before being appended. 
 <p>If neither <code>skipNulls()</code> nor <code>useForNull(String)</code> is specified, the joining
  methods will throw <code>NullPointerException</code> if any given element is null. 
 <p><b>Warning: joiner instances are always immutable</b>; a configuration method such as <code>useForNull</code>
  has no effect on the instance it is invoked on! You must store and use the new joiner
  instance returned by the method. This makes joiners thread-safe, and safe to store as <code>static final</code>
  constants. 
 @code
 // Bad! Do not do this!
  Joiner joiner = Joiner.on(',');
  joiner.skipNulls(); // does nothing!
  return joiner.join("wrong", null, "wrong"); 
 
@endcode
  
 <p>See the Guava User Guide article on <a href="https://github.com/google/guava/wiki/StringsExplained#joiner">
 <code>Joiner</code></a>.
 @author Kevin Bourrillion
 @since 2.0
 */
@interface ComGoogleCommonBaseJoiner : NSObject

#pragma mark Public

/*!
 @brief Appends the string representation of each of <code>parts</code>, using the previously configured
  separator between each, to <code>appendable</code>.
 */
- (id<JavaLangAppendable>)appendToWithJavaLangAppendable:(id<JavaLangAppendable>)appendable
                                    withJavaLangIterable:(id<JavaLangIterable>)parts;

/*!
 @brief Appends the string representation of each of <code>parts</code>, using the previously configured
  separator between each, to <code>appendable</code>.
 @since 11.0
 */
- (id<JavaLangAppendable>)appendToWithJavaLangAppendable:(id<JavaLangAppendable>)appendable
                                    withJavaUtilIterator:(id<JavaUtilIterator>)parts;

/*!
 @brief Appends to <code>appendable</code> the string representation of each of the remaining arguments.
 */
- (id<JavaLangAppendable>)appendToWithJavaLangAppendable:(id<JavaLangAppendable>)appendable
                                                  withId:(id __nullable)first
                                                  withId:(id __nullable)second
                                       withNSObjectArray:(IOSObjectArray *)rest;

/*!
 @brief Appends the string representation of each of <code>parts</code>, using the previously configured
  separator between each, to <code>appendable</code>.
 */
- (id<JavaLangAppendable>)appendToWithJavaLangAppendable:(id<JavaLangAppendable>)appendable
                                       withNSObjectArray:(IOSObjectArray *)parts;

/*!
 @brief Appends the string representation of each of <code>parts</code>, using the previously configured
  separator between each, to <code>builder</code>.Identical to <code>Iterable)</code>
 , except that it does not throw <code>IOException</code>.
 */
- (JavaLangStringBuilder *)appendToWithJavaLangStringBuilder:(JavaLangStringBuilder *)builder
                                        withJavaLangIterable:(id<JavaLangIterable>)parts;

/*!
 @brief Appends the string representation of each of <code>parts</code>, using the previously configured
  separator between each, to <code>builder</code>.Identical to <code>Iterable)</code>
 , except that it does not throw <code>IOException</code>.
 @since 11.0
 */
- (JavaLangStringBuilder *)appendToWithJavaLangStringBuilder:(JavaLangStringBuilder *)builder
                                        withJavaUtilIterator:(id<JavaUtilIterator>)parts;

/*!
 @brief Appends to <code>builder</code> the string representation of each of the remaining arguments.
 Identical to <code>Object, Object, Object...)</code>, except that it does not
  throw <code>IOException</code>.
 */
- (JavaLangStringBuilder *)appendToWithJavaLangStringBuilder:(JavaLangStringBuilder *)builder
                                                      withId:(id __nullable)first
                                                      withId:(id __nullable)second
                                           withNSObjectArray:(IOSObjectArray *)rest;

/*!
 @brief Appends the string representation of each of <code>parts</code>, using the previously configured
  separator between each, to <code>builder</code>.Identical to <code>Iterable)</code>
 , except that it does not throw <code>IOException</code>.
 */
- (JavaLangStringBuilder *)appendToWithJavaLangStringBuilder:(JavaLangStringBuilder *)builder
                                           withNSObjectArray:(IOSObjectArray *)parts;

/*!
 @brief Returns a string containing the string representation of each of <code>parts</code>, using the
  previously configured separator between each.
 */
- (NSString *)joinWithJavaLangIterable:(id<JavaLangIterable>)parts;

/*!
 @brief Returns a string containing the string representation of each of <code>parts</code>, using the
  previously configured separator between each.
 @since 11.0
 */
- (NSString *)joinWithJavaUtilIterator:(id<JavaUtilIterator>)parts;

/*!
 @brief Returns a string containing the string representation of each argument, using the previously
  configured separator between each.
 */
- (NSString *)joinWithId:(id __nullable)first
                  withId:(id __nullable)second
       withNSObjectArray:(IOSObjectArray *)rest;

/*!
 @brief Returns a string containing the string representation of each of <code>parts</code>, using the
  previously configured separator between each.
 */
- (NSString *)joinWithNSObjectArray:(IOSObjectArray *)parts;

/*!
 @brief Returns a joiner which automatically places <code>separator</code> between consecutive elements.
 */
+ (ComGoogleCommonBaseJoiner *)onWithChar:(jchar)separator;

/*!
 @brief Returns a joiner which automatically places <code>separator</code> between consecutive elements.
 */
+ (ComGoogleCommonBaseJoiner *)onWithNSString:(NSString *)separator;

/*!
 @brief Returns a joiner with the same behavior as this joiner, except automatically skipping over any
  provided null elements.
 */
- (ComGoogleCommonBaseJoiner *)skipNulls;

/*!
 @brief Returns a joiner with the same behavior as this one, except automatically substituting <code>nullText</code>
  for any provided null elements.
 */
- (ComGoogleCommonBaseJoiner *)useForNullWithNSString:(NSString *)nullText;

/*!
 @brief Returns a <code>MapJoiner</code> using the given key-value separator, and the same configuration as
  this <code>Joiner</code> otherwise.
 @since 20.0
 */
- (ComGoogleCommonBaseJoiner_MapJoiner *)withKeyValueSeparatorWithChar:(jchar)keyValueSeparator;

/*!
 @brief Returns a <code>MapJoiner</code> using the given key-value separator, and the same configuration as
  this <code>Joiner</code> otherwise.
 */
- (ComGoogleCommonBaseJoiner_MapJoiner *)withKeyValueSeparatorWithNSString:(NSString *)keyValueSeparator;

#pragma mark Package-Private

- (id<JavaLangCharSequence>)toStringWithId:(id)part;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonBaseJoiner)

FOUNDATION_EXPORT ComGoogleCommonBaseJoiner *ComGoogleCommonBaseJoiner_onWithNSString_(NSString *separator);

FOUNDATION_EXPORT ComGoogleCommonBaseJoiner *ComGoogleCommonBaseJoiner_onWithChar_(jchar separator);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonBaseJoiner)

#endif

#if !defined (ComGoogleCommonBaseJoiner_MapJoiner_) && (INCLUDE_ALL_ComGoogleCommonBaseJoiner || defined(INCLUDE_ComGoogleCommonBaseJoiner_MapJoiner))
#define ComGoogleCommonBaseJoiner_MapJoiner_

@class JavaLangStringBuilder;
@protocol JavaLangAppendable;
@protocol JavaLangIterable;
@protocol JavaUtilIterator;
@protocol JavaUtilMap;

/*!
 @brief An object that joins map entries in the same manner as <code>Joiner</code> joins iterables and
  arrays.Like <code>Joiner</code>, it is thread-safe and immutable.
 <p>In addition to operating on <code>Map</code> instances, <code>MapJoiner</code> can operate on <code>Multimap</code>
  entries in two distinct modes: 
 <ul>
    <li>To output a separate entry for each key-value pair, pass <code>multimap.entries()</code> to a
        <code>MapJoiner</code> method that accepts entries as input, and receive output of the form
        <code>key1=A&key1=B&key2=C</code>.
    <li>To output a single entry for each key, pass <code>multimap.asMap()</code> to a <code>MapJoiner</code>
  method that accepts a map as input, and receive output of the form <code>key1=[A, B]&key2=C</code>
 .
  </ul>
 @since 2.0
 */
@interface ComGoogleCommonBaseJoiner_MapJoiner : NSObject

#pragma mark Public

/*!
 @brief Appends the string representation of each entry in <code>entries</code>, using the previously
  configured separator and key-value separator, to <code>appendable</code>.
 @since 10.0
 */
- (id<JavaLangAppendable>)appendToWithJavaLangAppendable:(id<JavaLangAppendable>)appendable
                                    withJavaLangIterable:(id<JavaLangIterable>)entries;

/*!
 @brief Appends the string representation of each entry in <code>entries</code>, using the previously
  configured separator and key-value separator, to <code>appendable</code>.
 @since 11.0
 */
- (id<JavaLangAppendable>)appendToWithJavaLangAppendable:(id<JavaLangAppendable>)appendable
                                    withJavaUtilIterator:(id<JavaUtilIterator>)parts;

/*!
 @brief Appends the string representation of each entry of <code>map</code>, using the previously
  configured separator and key-value separator, to <code>appendable</code>.
 */
- (id<JavaLangAppendable>)appendToWithJavaLangAppendable:(id<JavaLangAppendable>)appendable
                                         withJavaUtilMap:(id<JavaUtilMap>)map;

/*!
 @brief Appends the string representation of each entry in <code>entries</code>, using the previously
  configured separator and key-value separator, to <code>builder</code>.Identical to <code>Iterable)</code>
 , except that it does not throw <code>IOException</code>.
 @since 10.0
 */
- (JavaLangStringBuilder *)appendToWithJavaLangStringBuilder:(JavaLangStringBuilder *)builder
                                        withJavaLangIterable:(id<JavaLangIterable>)entries;

/*!
 @brief Appends the string representation of each entry in <code>entries</code>, using the previously
  configured separator and key-value separator, to <code>builder</code>.Identical to <code>Iterable)</code>
 , except that it does not throw <code>IOException</code>.
 @since 11.0
 */
- (JavaLangStringBuilder *)appendToWithJavaLangStringBuilder:(JavaLangStringBuilder *)builder
                                        withJavaUtilIterator:(id<JavaUtilIterator>)entries;

/*!
 @brief Appends the string representation of each entry of <code>map</code>, using the previously
  configured separator and key-value separator, to <code>builder</code>.Identical to <code>Map)</code>
 , except that it does not throw <code>IOException</code>.
 */
- (JavaLangStringBuilder *)appendToWithJavaLangStringBuilder:(JavaLangStringBuilder *)builder
                                             withJavaUtilMap:(id<JavaUtilMap>)map;

/*!
 @brief Returns a string containing the string representation of each entry in <code>entries</code>, using
  the previously configured separator and key-value separator.
 @since 10.0
 */
- (NSString *)joinWithJavaLangIterable:(id<JavaLangIterable>)entries;

/*!
 @brief Returns a string containing the string representation of each entry in <code>entries</code>, using
  the previously configured separator and key-value separator.
 @since 11.0
 */
- (NSString *)joinWithJavaUtilIterator:(id<JavaUtilIterator>)entries;

/*!
 @brief Returns a string containing the string representation of each entry of <code>map</code>, using the
  previously configured separator and key-value separator.
 */
- (NSString *)joinWithJavaUtilMap:(id<JavaUtilMap>)map;

/*!
 @brief Returns a map joiner with the same behavior as this one, except automatically substituting 
 <code>nullText</code> for any provided null keys or values.
 */
- (ComGoogleCommonBaseJoiner_MapJoiner *)useForNullWithNSString:(NSString *)nullText;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonBaseJoiner_MapJoiner)

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonBaseJoiner_MapJoiner)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ComGoogleCommonBaseJoiner")
