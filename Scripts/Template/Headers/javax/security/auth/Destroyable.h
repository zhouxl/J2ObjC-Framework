//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/javax/security/auth/Destroyable.java
//

#include "../../../J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaxSecurityAuthDestroyable")
#ifdef RESTRICT_JavaxSecurityAuthDestroyable
#define INCLUDE_ALL_JavaxSecurityAuthDestroyable 0
#else
#define INCLUDE_ALL_JavaxSecurityAuthDestroyable 1
#endif
#undef RESTRICT_JavaxSecurityAuthDestroyable

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if !defined (JavaxSecurityAuthDestroyable_) && (INCLUDE_ALL_JavaxSecurityAuthDestroyable || defined(INCLUDE_JavaxSecurityAuthDestroyable))
#define JavaxSecurityAuthDestroyable_

/*!
 @brief Objects such as credentials may optionally implement this interface
  to provide the capability to destroy its contents.
 - seealso: javax.security.auth.Subject
 */
@protocol JavaxSecurityAuthDestroyable < JavaObject >

/*!
 @brief Destroy this <code>Object</code>.
 <p> Sensitive information associated with this <code>Object</code>
  is destroyed or cleared.  Subsequent calls to certain methods
  on this <code>Object</code> will result in an 
 <code>IllegalStateException</code> being thrown. 
 <p>
 @throw DestroyFailedExceptionif the destroy operation fails. <p>
 @throw SecurityExceptionif the caller does not have permission
           to destroy this <code>Object</code>.
 */
- (void)destroy;

/*!
 @brief Determine if this <code>Object</code> has been destroyed.
 <p>
 @return true if this <code>Object</code> has been destroyed,
           false otherwise.
 */
- (jboolean)isDestroyed;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxSecurityAuthDestroyable)

J2OBJC_TYPE_LITERAL_HEADER(JavaxSecurityAuthDestroyable)

#endif


#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaxSecurityAuthDestroyable")
